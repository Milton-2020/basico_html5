importante: 

The requested URL returned error: 403

para solucionar este error:
----------------------------------------
vercion windows

Lo más probable es que ya lo hayan solucionado, sin embargo, si una persona llegó hasta aquí, 
la solución a nivel de windows … ingresar a Panel de control\Todos los elementos de 
Panel de control\Administrador de credenciales y crendenciales de windows buscar y eliminar la crendencial guardada de github. 
Reintentar el push remote, de esta forma github solicita las credenciales a nivel remoto, solucionando así el problema.

vercion mac

¡Exacto! En el caso de que estes usando macOS para la corrección de este error ve al “Acceso a llaveros” 
para ello usa el Spotlight de tu mac, una vez ahí busca “git” en la lista que te aparece encuentra el renglón que contenga:

Nombre: github .com Clase: contraseña de internet Llavero: inicio de sesión

Elimina esta entrada con click derecho y listo. Ve a la terminal y de nuevo te volverá a pedir tus credenciales.

en la terminar de code ya en ubicadoe la carpeta del proyecto desde la terminal
---------------------------------------------

1) git init
configuramos nombre y correo:
2) git config --global user.name "tu nombre" //esta linea de comando es para definir este nombre para todos los proyectos
2.2) git config user.name "tu nombre" // para definir nombre para un proyecto en especifico
correo:
3) git config --global user.email tucorreo@ejemplo.com
3.3) git config user.email tucorreo@ejemplo.com
asegurese de configurar los valores de "user.name" y "user.email" en git este error se da por que no se a configurado el paso 2 o 3

agregamos nustro repositorio remoto

4) git remote add origin https://github.com/Milton-2020/primeros_pasos_nodejs.git

hacer un commit
5) git add nombre del documento

6) git commit -m "el cometario a ingresar"//con esto realizamos el commit

notas:
para verificar la configuracion realizada puedes ejecutar lo siguiente 

git config --list  //para salir de la ejecucion solo precionas la etra q

git diff nombre del archivo //para verificar las diferencias del archivo

git log //para validar todos lo commit realizados

para desacer los cambios 

git restore nombre del documento // para revertir los cambios
--------------------------------------------------------------
Crear una vercioin al terna de la rama principal

git branch nombre de la nueva rama

git branch // muestra las ramas creadas

-------------------------------------------------------------
cambiar de rama 

git checkout nombre de la rama 

---------------------------------------------------------------
cambiar de rama 

git checkout nombre de la rama

------------------------------------------------------------
subirlo a un repocitorio remoto 

git remote add origin https://github.com/Milton-2020/AprendiendoGit.git

git push -u origin master
----------------------------------------------------------
verificar los repositorios remotos

git remote -v

---------------------------------------------------------
cambiar de repositorio

git remote set-url origin https://github.com/USERNAME/REPOSITORY.git



***************************************************************

COMANDOS BASICOS 
* git init Oye Git, voy a usar estos documentos contigo ¿vale?
* git add <file> Pasa los docs a staging area 
* git add . Pasa todos los archivos
* git commit Pasa los docs de staging area a repository (Después de esto se te va a abrir el editor de código VIN en donde tendrás que escribir un comentario, si te quieres evitar abrir VIN entonces utiliza los siguientes comandos:)
* git commit -m "comentario" Lo mismo que el commit regular, pero ahora no necesitas entrar a VIN
* git status Ver en que status (wd, sa, r) están los docs
* git push Subir los docs a un server (Github)
* git pull  Traer los docs de un server, traer los cambios de tus compañeros
* git clone Hacerte una copia de lo que está en el server a tu PC
* git checkout -- <file> Para revertir los cambios de los archivos
* git diff <file> Para ver las diferencias hechas en los archivos
* git branch Ver las ramas que hay ("master" es la rama default)
* git branch "nombre" Crear una nueva rama
* git checkout "nombre" Ir a una rama en especifico 

*  git config -- global user.email "email" Para configurar email del usuario
*  git config -- global user.name "nombre" Para configurar nombre del usuario

***************************************************************************

